@using OrderNow.Services
@using global::Data.Entities
@inject OrdersService OrdersService
@inject NavigationManager NavigationManager
@inject IJSRuntime JS

<div class="favorites-search-bar">
    <p class="title">@TableName</p>
    <input type="text" value="Search here" class="search-box"/>
    <button class="filter-btn">Filter</button>
</div>

<table class="orders-list">
    <thead class="table-header">
    <tr>
        <th>
            <p id="fav-title">Cliente</p>
        </th>
        <th>
            <p id="fav-title">Estado</p>
        </th>
        <th>
            <p id="fav-title">Demora actual</p>
        </th>
        <th>
            <p id="fav-title">Items</p>
        </th>
        <th>
            <p id="fav-title">Total</p>
        </th>
    </tr>
    </thead>
    <tbody>
    @if (Orders != null)
    {
        @foreach (var order in Orders)
        {
            <tr>
                <td>
                    <div>
                        <img src="" alt=""/>
                        <p class="name">Emiliano</p>
                    </div>
                </td>
                <td>
                    <div class="status-box">
                        <p>In process</p>
                    </div>
                </td>
                <td>
                    <div class="status-progress-bar">
                    </div>
                    <p class="order-time-delay">28 min</p>
                </td>
                <td>
                    <p class="order-items">10</p>
                </td>
                <td>
                    <p class="order-amount">$589,68</p>
                </td>
            </tr>
        }
    }
    </tbody>
</table>

@code{

    [ParameterAttribute]
    public string? TableName { get; set; }


    public IEnumerable<Orders> Orders { get; set; }

    protected override async Task OnInitializedAsync()
    {
        Orders = await OrdersService.GelAllAsync();
    }

}