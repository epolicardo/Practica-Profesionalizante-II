
@inject NavigationManager NavManager

@using System.Security.Claims
@using Microsoft.AspNetCore.Components.Authorization
@inject AuthenticationStateProvider AuthenticationStateProvider


<div class="login-card-container">
		<div class="login-card-left">
			<div class="login-img">
				<img src="assets/imgs/logo.svg" />
			</div>
		</div>
		<div class="login-card-right">
			<EditForm Model="claims" id="LoginForm" OnValidSubmit="FormSubmit">
				<label for="email" class="input-data">Correo Electrónico</label>
				<InputText DisplayName="Correo Electronico" name="email" class="form-control input-data" @bind-Value="surnameMessage"></InputText>
				<label class="input-data" for="password">Contraseña</label>
				<InputText DisplayName="Password" name="password" type="password" class="form-control input-data" @bind-Value="surnameMessage"></InputText>
				<button class="btn btn-primary" type="submit" id="submit">Ingresar</button>
				<a class="login-card-recovery" href="/">Recuperar acceso</a>
			</EditForm>
		</div>
	
</div>

@code {
	 private string authMessage;
    private string surnameMessage;
    private IEnumerable<Claim> claims = Enumerable.Empty<Claim>();

    private async Task GetClaimsPrincipalData()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        if (user.Identity.IsAuthenticated)
        {
            authMessage = $"{user.Identity.Name} is authenticated.";
            claims = user.Claims;
            surnameMessage = 
                $"Surname: {user.FindFirst(c => c.Type == ClaimTypes.Surname)?.Value}";
        }
        else
        {
            authMessage = "The user is NOT authenticated.";
        }
    }

	public void FormSubmit()
	{
		GetClaimsPrincipalData();
		NavManager.NavigateTo("/business");
	}
}